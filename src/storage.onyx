package azure.storage

use core {Result, tprintf, time}
use azure.identity
use http

#local {
    AZ_RESOURCE_NAME :: "https://storage.azure.com/"
    AZ_API_VERSION   :: "2024-11-04"
}

StorageClient :: struct {
    credentials: &identity.CredentialProvider
    storage_uri: str
}

StorageClient.make :: (uri: str, creds: &identity.CredentialProvider) => #Self.{
    creds
    uri
}

StorageClient.list_blobs_in_container :: (self: #Self, container: str) -> Result(str, str) {
    token := self.credentials
        ->get_access_token(AZ_RESOURCE_NAME)
        ->transform_err(err => tprintf("Credential Error: {}", err))?

    client := http.client.Client.{}
    defer client->free()

    res := http.client.request_builder(&client)
        ->set_url(tprintf("{}{}", self.storage_uri, container))
        ->set_method(.Get)
        ->set_query("restype", "container")
        ->set_query("comp", "list")
        ->set_header("Authorization", tprintf("Bearer {}", token))
        ->set_header("x-ms-version", AZ_API_VERSION)
        ->set_header("Date", time.now()->format("%a, %d %b %Y %H:%M:%S GMT"))
        ->send()
        // TODO ->set_header("x-ms-client-request-id", "...")
    
    if !res || res.status >= 400 {
        return .{ Err = res.body }
    }

    return .{ Ok = res.body }
}


